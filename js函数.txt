函数表达式
JavaScript 函数可以通过一个表达式定义。
函数表达式可以存储在变量中：
实例
var x = function (a, b) {return a * b};

在函数表达式存储在变量后，变量也可作为一个函数使用：
实例
var x = function (a, b) {return a * b};
var z = x(4, 3);

在以上实例中，我们了解到函数通过关键字 function 定义。
函数同样可以通过内置的 JavaScript 函数构造器（Function()）定义。
实例
var myFunction = new Function("a", "b", "return a * b");

var x = myFunction(4, 3);

函数提升（Hoisting）
使用表达式定义函数时无法提升。

自调用函数
函数表达式可以 "自调用"。
自调用表达式会自动调用。
如果表达式后面紧跟 () ，则会自动调用。
不能自调用声明的函数。
通过添加括号，来说明它是一个函数表达式：





函数参数：

Arguments 对象
JavaScript 函数有个内置的对象 arguments 对象。
argument 对象包含了函数调用的参数数组。

默认参数
如果函数在调用时未提供隐式参数，参数会默认设置为： undefined
有时这是可以接受的，但是建议最好为参数设置一个默认值：


通过值传递参数（与c类似）
在函数中调用的参数是函数的隐式参数。
JavaScript 隐式参数通过值来传递：函数仅仅只是获取值。
如果函数修改参数的值，不会修改显式参数的初始值（在函数外定义）。
隐式参数的改变在函数外是不可见的。


JavaScript 函数调用
JavaScript 函数有 4 种调用方式。
作为一个函数调用
函数作为方法调用
使用构造函数调用函数
this 关键字
一般而言，在Javascript中，this指向函数执行时的当前对象。
this 是 JavaScript 语言的一个关键字。
它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用


作为函数方法调用函数
在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法。
call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。
实例
function myFunction(a, b) {
    return a * b;
}
myObject = myFunction.call(myObject, 10, 2);     // 返回 20


a 是一个 全局 变量。
在web页面中全局变量属于 window 对象。
全局变量可应用于页面上的所有脚本。
在第一个实例中， a 是一个 局部 变量。
局部变量只能用于定义它函数内部。对于其他的函数或脚本代码是不可用的。
全局和局部变量即便名称相同，它们也是两个不同的变量。修改其中一个，不会影响另一个的值。
Note	变量声明时如果不使用 var 关键字，那么它就是一个全局变量，即便它在函数内定义。

JavaScript 内嵌函数
所有函数都能访问全局变量。  
实际上，在 JavaScript 中，所有函数都能访问它们上一层的作用域。
JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。

, 闭包会持有父方法的局部变量并且不会随父方法销毁而销毁, 所以这个counter其实就是来自于第一次function执行时创建的变量。